From 32ea6f3e431163fd680410fa59d19d1b48192c6d Mon Sep 17 00:00:00 2001
From: Filipe Brandao <fdabrandao@gmail.com>
Date: Thu, 22 Sep 2016 09:42:18 -0400
Subject: [PATCH] Replace all occurrences of %zu by F_ZU in order to fix #9

find . -name "*.c" -exec sed -i 's/"%zu"/F_ZU/g' {} \;
find . -name "*.c" -exec sed -i 's/"%zu/F_ZU"/g' {} \;
find . -name "*.c" -exec sed -i 's/%zu"/"F_ZU/g' {} \;
find . -name "*.c" -exec sed -i 's/%zu/"F_ZU"/g' {} \;
---
 doc/examples/block.c                  |  2 +-
 doc/examples/fftmr.c                  |  2 +-
 doc/examples/integration.c            |  2 +-
 doc/examples/nlfit.c                  |  8 ++---
 doc/examples/nlfit2.c                 |  8 ++---
 doc/examples/poisson.c                |  2 +-
 doc/examples/sortsmall.c              |  4 +--
 doc/examples/spmatrix.c               | 10 +++---
 doc/examples/sum.c                    |  4 +--
 doc/examples/vectorview.c             |  2 +-
 linalg/test.c                         |  2 +-
 linalg/test_cholesky.c                |  6 ++--
 multifit/test_bard.c                  |  2 +-
 multifit/test_beale.c                 |  2 +-
 multifit/test_box.c                   |  2 +-
 multifit/test_boxbod.c                |  2 +-
 multifit/test_brown1.c                |  2 +-
 multifit/test_brown2.c                |  2 +-
 multifit/test_brown3.c                |  2 +-
 multifit/test_eckerle.c               |  2 +-
 multifit/test_enso.c                  |  2 +-
 multifit/test_exp1.c                  |  2 +-
 multifit/test_filip.c                 |  4 +--
 multifit/test_gaussian.c              |  2 +-
 multifit/test_hahn1.c                 |  2 +-
 multifit/test_helical.c               |  2 +-
 multifit/test_jennrich.c              |  2 +-
 multifit/test_kirby2.c                |  2 +-
 multifit/test_kowalik.c               |  2 +-
 multifit/test_lin1.c                  |  2 +-
 multifit/test_longley.c               |  4 +--
 multifit/test_meyer.c                 |  2 +-
 multifit/test_meyerscal.c             |  2 +-
 multifit/test_nonlinear.c             |  4 +--
 multifit/test_pontius.c               |  4 +--
 multifit/test_powell1.c               |  2 +-
 multifit/test_powell2.c               |  2 +-
 multifit/test_powell3.c               |  2 +-
 multifit/test_rat42.c                 |  2 +-
 multifit/test_rat43.c                 |  2 +-
 multifit/test_reg.c                   | 20 ++++++------
 multifit/test_rosenbrock.c            |  2 +-
 multifit/test_rosenbrocke.c           |  2 +-
 multifit/test_roth.c                  |  2 +-
 multifit/test_shaw.c                  | 10 +++---
 multifit/test_thurber.c               |  2 +-
 multifit/test_vardim.c                |  2 +-
 multifit/test_watson.c                |  2 +-
 multifit/test_wnlin.c                 |  2 +-
 multifit/test_wood.c                  |  2 +-
 multifit_nlinear/test_bard.c          |  2 +-
 multifit_nlinear/test_beale.c         |  2 +-
 multifit_nlinear/test_biggs.c         |  2 +-
 multifit_nlinear/test_boxbod.c        |  2 +-
 multifit_nlinear/test_brown1.c        |  2 +-
 multifit_nlinear/test_brown2.c        |  2 +-
 multifit_nlinear/test_brown3.c        |  2 +-
 multifit_nlinear/test_eckerle.c       |  2 +-
 multifit_nlinear/test_enso.c          |  2 +-
 multifit_nlinear/test_exp1.c          |  2 +-
 multifit_nlinear/test_gaussian.c      |  2 +-
 multifit_nlinear/test_hahn1.c         |  2 +-
 multifit_nlinear/test_helical.c       |  2 +-
 multifit_nlinear/test_jennrich.c      |  2 +-
 multifit_nlinear/test_kirby2.c        |  2 +-
 multifit_nlinear/test_kowalik.c       |  2 +-
 multifit_nlinear/test_lin1.c          |  2 +-
 multifit_nlinear/test_meyer.c         |  2 +-
 multifit_nlinear/test_meyerscal.c     |  2 +-
 multifit_nlinear/test_powell1.c       |  2 +-
 multifit_nlinear/test_powell2.c       |  2 +-
 multifit_nlinear/test_powell3.c       |  2 +-
 multifit_nlinear/test_rat42.c         |  2 +-
 multifit_nlinear/test_rat43.c         |  2 +-
 multifit_nlinear/test_rosenbrock.c    |  2 +-
 multifit_nlinear/test_rosenbrocke.c   |  2 +-
 multifit_nlinear/test_roth.c          |  2 +-
 multifit_nlinear/test_thurber.c       |  2 +-
 multifit_nlinear/test_vardim.c        |  2 +-
 multifit_nlinear/test_watson.c        |  2 +-
 multifit_nlinear/test_wnlin.c         |  2 +-
 multifit_nlinear/test_wood.c          |  2 +-
 multilarge/test.c                     | 16 +++++-----
 multilarge_nlinear/test_bard.c        |  2 +-
 multilarge_nlinear/test_beale.c       |  2 +-
 multilarge_nlinear/test_boxbod.c      |  2 +-
 multilarge_nlinear/test_brown1.c      |  2 +-
 multilarge_nlinear/test_brown2.c      |  2 +-
 multilarge_nlinear/test_brown3.c      |  2 +-
 multilarge_nlinear/test_eckerle.c     |  2 +-
 multilarge_nlinear/test_enso.c        |  2 +-
 multilarge_nlinear/test_exp1.c        |  2 +-
 multilarge_nlinear/test_gaussian.c    |  2 +-
 multilarge_nlinear/test_hahn1.c       |  2 +-
 multilarge_nlinear/test_helical.c     |  2 +-
 multilarge_nlinear/test_jennrich.c    |  2 +-
 multilarge_nlinear/test_kirby2.c      |  2 +-
 multilarge_nlinear/test_kowalik.c     |  2 +-
 multilarge_nlinear/test_lin1.c        |  2 +-
 multilarge_nlinear/test_meyer.c       |  2 +-
 multilarge_nlinear/test_meyerscal.c   |  2 +-
 multilarge_nlinear/test_powell1.c     |  2 +-
 multilarge_nlinear/test_powell2.c     |  2 +-
 multilarge_nlinear/test_powell3.c     |  2 +-
 multilarge_nlinear/test_rat42.c       |  2 +-
 multilarge_nlinear/test_rat43.c       |  2 +-
 multilarge_nlinear/test_rosenbrock.c  |  2 +-
 multilarge_nlinear/test_rosenbrocke.c |  2 +-
 multilarge_nlinear/test_roth.c        |  2 +-
 multilarge_nlinear/test_thurber.c     |  2 +-
 multilarge_nlinear/test_vardim.c      |  2 +-
 multilarge_nlinear/test_watson.c      |  2 +-
 multilarge_nlinear/test_wnlin.c       |  2 +-
 multilarge_nlinear/test_wood.c        |  2 +-
 rstat/test.c                          | 12 ++++----
 spblas/test.c                         |  2 +-
 specfunc/test_legendre.c              | 34 ++++++++++----------
 splinalg/test.c                       | 14 ++++-----
 spmatrix/spio.c                       | 12 ++++----
 spmatrix/test.c                       | 58 +++++++++++++++++------------------
 120 files changed, 218 insertions(+), 218 deletions(-)

diff --git a/doc/examples/block.c b/doc/examples/block.c
index ca6e80e..40e2b87 100644
--- a/doc/examples/block.c
+++ b/doc/examples/block.c
@@ -6,7 +6,7 @@ main (void)
 {
   gsl_block * b = gsl_block_alloc (100);
   
-  printf ("length of block = %zu\n", b->size);
+  printf ("length of block = "F_ZU"\n", b->size);
   printf ("block data address = %p\n", b->data);
 
   gsl_block_free (b);
diff --git a/doc/examples/fftmr.c b/doc/examples/fftmr.c
index b12dc76..0e2da4f 100644
--- a/doc/examples/fftmr.c
+++ b/doc/examples/fftmr.c
@@ -41,7 +41,7 @@ main (void)
 
   for (i = 0; i < (int) wavetable->nf; i++)
     {
-       printf ("# factor %d: %zu\n", i, 
+       printf ("# factor %d: "F_ZU"\n", i, 
                wavetable->factor[i]);
     }
 
diff --git a/doc/examples/integration.c b/doc/examples/integration.c
index 79dd1c3..a3d5097 100644
--- a/doc/examples/integration.c
+++ b/doc/examples/integration.c
@@ -29,7 +29,7 @@ main (void)
   printf ("exact result    = % .18f\n", expected);
   printf ("estimated error = % .18f\n", error);
   printf ("actual error    = % .18f\n", result - expected);
-  printf ("intervals       = %zu\n", w->size);
+  printf ("intervals       = "F_ZU"\n", w->size);
 
   gsl_integration_workspace_free (w);
 
diff --git a/doc/examples/nlfit.c b/doc/examples/nlfit.c
index 370ad8f..519bf08 100644
--- a/doc/examples/nlfit.c
+++ b/doc/examples/nlfit.c
@@ -134,7 +134,7 @@ main (void)
 
       weights[i] = 1.0 / (si * si);
       y[i] = yi + dy;
-      printf ("data: %zu %g %g\n", i, y[i], si);
+      printf ("data: "F_ZU" %g %g\n", i, y[i], si);
     };
 
   /* allocate workspace with default parameters */
@@ -164,10 +164,10 @@ main (void)
   fprintf(stderr, "summary from method '%s/%s'\n",
           gsl_multifit_nlinear_name(w),
           gsl_multifit_nlinear_trs_name(w));
-  fprintf(stderr, "number of iterations: %zu\n",
+  fprintf(stderr, "number of iterations: "F_ZU"\n",
           gsl_multifit_nlinear_niter(w));
-  fprintf(stderr, "function evaluations: %zu\n", fdf.nevalf);
-  fprintf(stderr, "Jacobian evaluations: %zu\n", fdf.nevaldf);
+  fprintf(stderr, "function evaluations: "F_ZU"\n", fdf.nevalf);
+  fprintf(stderr, "Jacobian evaluations: "F_ZU"\n", fdf.nevaldf);
   fprintf(stderr, "reason for stopping: %s\n",
           (info == 1) ? "small step size" : "small gradient");
   fprintf(stderr, "initial |f(x)| = %f\n", sqrt(chisq0));
diff --git a/doc/examples/nlfit2.c b/doc/examples/nlfit2.c
index f9ff235..96a85ec 100644
--- a/doc/examples/nlfit2.c
+++ b/doc/examples/nlfit2.c
@@ -90,10 +90,10 @@ solve_system(gsl_vector *x0, gsl_multifit_nlinear_fdf *fdf,
 
   /* print summary */
 
-  fprintf(stderr, "NITER         = %zu\n", gsl_multifit_nlinear_niter(work));
-  fprintf(stderr, "NFEV          = %zu\n", fdf->nevalf);
-  fprintf(stderr, "NJEV          = %zu\n", fdf->nevaldf);
-  fprintf(stderr, "NAEV          = %zu\n", fdf->nevalfvv);
+  fprintf(stderr, "NITER         = "F_ZU"\n", gsl_multifit_nlinear_niter(work));
+  fprintf(stderr, "NFEV          = "F_ZU"\n", fdf->nevalf);
+  fprintf(stderr, "NJEV          = "F_ZU"\n", fdf->nevaldf);
+  fprintf(stderr, "NAEV          = "F_ZU"\n", fdf->nevalfvv);
   fprintf(stderr, "initial cost  = %.12e\n", chisq0);
   fprintf(stderr, "final cost    = %.12e\n", chisq);
   fprintf(stderr, "final x       = (%.12e, %.12e)\n",
diff --git a/doc/examples/poisson.c b/doc/examples/poisson.c
index 5d9ba81..063db2e 100644
--- a/doc/examples/poisson.c
+++ b/doc/examples/poisson.c
@@ -72,7 +72,7 @@ main()
 
         /* print out residual norm ||A*u - f|| */
         residual = gsl_splinalg_itersolve_normr(work);
-        fprintf(stderr, "iter %zu residual = %.12e\n", iter, residual);
+        fprintf(stderr, "iter "F_ZU" residual = %.12e\n", iter, residual);
 
         if (status == GSL_SUCCESS)
           fprintf(stderr, "Converged\n");
diff --git a/doc/examples/sortsmall.c b/doc/examples/sortsmall.c
index d460ad4..9ace55c 100644
--- a/doc/examples/sortsmall.c
+++ b/doc/examples/sortsmall.c
@@ -24,11 +24,11 @@ main (void)
 
   gsl_sort_smallest (small, k, x, 1, N);
 
-  printf ("%zu smallest values from %zu\n", k, N);
+  printf (F_ZU" smallest values from "F_ZU"\n", k, N);
 
   for (i = 0; i < k; i++)
     {
-      printf ("%zu: %.18f\n", i, small[i]);
+      printf (F_ZU": %.18f\n", i, small[i]);
     }
 
   free (x);
diff --git a/doc/examples/spmatrix.c b/doc/examples/spmatrix.c
index f2a0f17..1cb8c95 100644
--- a/doc/examples/spmatrix.c
+++ b/doc/examples/spmatrix.c
@@ -23,7 +23,7 @@ main()
   printf("printing all matrix elements:\n");
   for (i = 0; i < 5; ++i)
     for (j = 0; j < 4; ++j)
-      printf("A(%zu,%zu) = %g\n", i, j,
+      printf("A("F_ZU","F_ZU") = %g\n", i, j,
              gsl_spmatrix_get(A, i, j));
 
   /* print out elements in triplet format */
@@ -36,12 +36,12 @@ main()
   printf("matrix in compressed column format:\n");
   printf("i = [ ");
   for (i = 0; i < B->nz; ++i)
-    printf("%zu, ", B->i[i]);
+    printf(F_ZU", ", B->i[i]);
   printf("]\n");
 
   printf("p = [ ");
   for (i = 0; i < B->size2 + 1; ++i)
-    printf("%zu, ", B->p[i]);
+    printf(F_ZU", ", B->p[i]);
   printf("]\n");
 
   printf("d = [ ");
@@ -55,12 +55,12 @@ main()
   printf("matrix in compressed row format:\n");
   printf("i = [ ");
   for (i = 0; i < C->nz; ++i)
-    printf("%zu, ", C->i[i]);
+    printf(F_ZU", ", C->i[i]);
   printf("]\n");
 
   printf("p = [ ");
   for (i = 0; i < C->size1 + 1; ++i)
-    printf("%zu, ", C->p[i]);
+    printf(F_ZU", ", C->p[i]);
   printf("]\n");
 
   printf("d = [ ");
diff --git a/doc/examples/sum.c b/doc/examples/sum.c
index 65dacc9..aa04c4f 100644
--- a/doc/examples/sum.c
+++ b/doc/examples/sum.c
@@ -31,11 +31,11 @@ main (void)
   printf ("term-by-term sum = % .16f using %d terms\n", 
           sum, N);
 
-  printf ("term-by-term sum = % .16f using %zu terms\n", 
+  printf ("term-by-term sum = % .16f using "F_ZU" terms\n", 
           w->sum_plain, w->terms_used);
 
   printf ("exact value      = % .16f\n", zeta_2);
-  printf ("accelerated sum  = % .16f using %zu terms\n", 
+  printf ("accelerated sum  = % .16f using "F_ZU" terms\n", 
           sum_accel, w->terms_used);
 
   printf ("estimated error  = % .16f\n", err);
diff --git a/doc/examples/vectorview.c b/doc/examples/vectorview.c
index 625f146..97d646f 100644
--- a/doc/examples/vectorview.c
+++ b/doc/examples/vectorview.c
@@ -21,7 +21,7 @@ main (void)
 
       d = gsl_blas_dnrm2 (&column.vector);
 
-      printf ("matrix column %zu, norm = %g\n", j, d);
+      printf ("matrix column "F_ZU", norm = %g\n", j, d);
     }
 
   gsl_matrix_free (m);
diff --git a/linalg/test.c b/linalg/test.c
index d56a15d..ed4349e 100644
--- a/linalg/test.c
+++ b/linalg/test.c
@@ -4706,7 +4706,7 @@ test_tri_invert2(CBLAS_UPLO_t Uplo, CBLAS_DIAG_t Diag, gsl_rng * r, const double
               double Bij = gsl_matrix_get(B, i, j);
               double expected = (i == j) ? 1.0 : 0.0;
 
-              gsl_test_rel(Bij, expected, tol, "tri_invert N=%zu %s %s",
+              gsl_test_rel(Bij, expected, tol, "tri_invert N="F_ZU" %s %s",
                            n,
                            (Uplo == CblasUpper) ? "Upper" : "Lower",
                            (Diag == CblasNonUnit) ? "NonUnit" : "Unit");
diff --git a/linalg/test_cholesky.c b/linalg/test_cholesky.c
index 8c9913e..1de232a 100644
--- a/linalg/test_cholesky.c
+++ b/linalg/test_cholesky.c
@@ -349,7 +349,7 @@ test_mcholesky_decomp_eps(const int posdef, const int scale, const gsl_matrix *
       /* ||E|| should be 0 */
       double norm = gsl_blas_dnrm2(E);
       s = norm != 0.0;
-      gsl_test(s, "%s: (%zu,%zu): ||E|| = %.12e",
+      gsl_test(s, "%s: ("F_ZU","F_ZU"): ||E|| = %.12e",
                desc, N, N, norm);
 
       /* check that D is decreasing */
@@ -363,7 +363,7 @@ test_mcholesky_decomp_eps(const int posdef, const int scale, const gsl_matrix *
             s = 1;
         }
 
-      gsl_test(s, "%s: (%zu,%zu): D is not decreasing",
+      gsl_test(s, "%s: ("F_ZU","F_ZU"): D is not decreasing",
                desc, N, N);
     }
   
@@ -687,7 +687,7 @@ test_pcholesky_decomp_eps(const int scale, const gsl_matrix * m,
         s = 1;
     }
 
-  gsl_test(s, "%s: (%zu,%zu): D is not decreasing",
+  gsl_test(s, "%s: ("F_ZU","F_ZU"): D is not decreasing",
            desc, N, N);
   
   /* compute L and LT */
diff --git a/multifit/test_bard.c b/multifit/test_bard.c
index 82c5770..c8c92f8 100644
--- a/multifit/test_bard.c
+++ b/multifit/test_bard.c
@@ -48,7 +48,7 @@ bard_checksol(const double x[], const double sumsq,
       if (!gsl_finite(bard_x[i]))
         continue;
 
-      gsl_test_rel(x[i], bard_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], bard_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_beale.c b/multifit/test_beale.c
index bfd2ed5..ca42870 100644
--- a/multifit/test_beale.c
+++ b/multifit/test_beale.c
@@ -22,7 +22,7 @@ beale_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < beale_P; ++i)
     {
-      gsl_test_rel(x[i], beale_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], beale_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_box.c b/multifit/test_box.c
index d742ed0..a309846 100644
--- a/multifit/test_box.c
+++ b/multifit/test_box.c
@@ -20,7 +20,7 @@ box_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < box_P; ++i)
     {
-      gsl_test_rel(x[i], box_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], box_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_boxbod.c b/multifit/test_boxbod.c
index 0ad9e0f..0fcd2ab 100644
--- a/multifit/test_boxbod.c
+++ b/multifit/test_boxbod.c
@@ -30,7 +30,7 @@ boxbod_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < boxbod_P; ++i)
     {
-      gsl_test_rel(x[i], boxbod_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], boxbod_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_brown1.c b/multifit/test_brown1.c
index a42ae49..88b9d86 100644
--- a/multifit/test_brown1.c
+++ b/multifit/test_brown1.c
@@ -22,7 +22,7 @@ brown1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < brown1_P; ++i)
     {
-      gsl_test_rel(x[i], brown1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], brown1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_brown2.c b/multifit/test_brown2.c
index 7b46a24..bb1aab0 100644
--- a/multifit/test_brown2.c
+++ b/multifit/test_brown2.c
@@ -44,7 +44,7 @@ brown2_checksol(const double x[], const double sumsq,
 
   for (i = 1; i < brown2_P - 1; ++i)
     {
-      gsl_test_rel(x[i], alpha, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], alpha, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 
diff --git a/multifit/test_brown3.c b/multifit/test_brown3.c
index d9eceb7..a4d5f79 100644
--- a/multifit/test_brown3.c
+++ b/multifit/test_brown3.c
@@ -20,7 +20,7 @@ brown3_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < brown3_P; ++i)
     {
-      gsl_test_rel(x[i], brown3_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], brown3_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_eckerle.c b/multifit/test_eckerle.c
index d81cc9e..278cf79 100644
--- a/multifit/test_eckerle.c
+++ b/multifit/test_eckerle.c
@@ -44,7 +44,7 @@ eckerle_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < eckerle_P; ++i)
     {
-      gsl_test_rel(x[i], eckerle_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], eckerle_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_enso.c b/multifit/test_enso.c
index 70956d1..4f11bcf 100644
--- a/multifit/test_enso.c
+++ b/multifit/test_enso.c
@@ -208,7 +208,7 @@ enso_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < enso_P; ++i)
     {
-      gsl_test_rel(x[i], enso_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], enso_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_exp1.c b/multifit/test_exp1.c
index 211c675..e676247 100644
--- a/multifit/test_exp1.c
+++ b/multifit/test_exp1.c
@@ -32,7 +32,7 @@ exp1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < exp1_P; ++i)
     {
-      gsl_test_rel(x[i], exp1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], exp1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_filip.c b/multifit/test_filip.c
index c98c53b..54001b6 100644
--- a/multifit/test_filip.c
+++ b/multifit/test_filip.c
@@ -45,14 +45,14 @@ test_filip_results(const char *str,
       gsl_test_rel (gsl_vector_get(c,i),
                     gsl_vector_get(expected_c, i),
                     1.0e-7,
-                    "%s c[%zu]", str, i) ;
+                    "%s c["F_ZU"]", str, i) ;
 
       if (cov_diag && expected_sd)
         {
           gsl_test_rel (sqrt(gsl_vector_get(cov_diag, i)),
                         gsl_vector_get(expected_sd, i),
                         1e-7,
-                        "%s cov[%zu,%zu]", str, i, i);
+                        "%s cov["F_ZU","F_ZU"]", str, i, i);
         }
     }
 
diff --git a/multifit/test_gaussian.c b/multifit/test_gaussian.c
index bd4389e..d462644 100644
--- a/multifit/test_gaussian.c
+++ b/multifit/test_gaussian.c
@@ -28,7 +28,7 @@ gaussian_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < gaussian_P; ++i)
     {
-      gsl_test_rel(x[i], gaussian_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], gaussian_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_hahn1.c b/multifit/test_hahn1.c
index 0cf84b1..5740665 100644
--- a/multifit/test_hahn1.c
+++ b/multifit/test_hahn1.c
@@ -516,7 +516,7 @@ hahn1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < hahn1_P; ++i)
     {
-      gsl_test_rel(x[i], hahn1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], hahn1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_helical.c b/multifit/test_helical.c
index 6bc3f39..fd44b34 100644
--- a/multifit/test_helical.c
+++ b/multifit/test_helical.c
@@ -21,7 +21,7 @@ helical_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < helical_P; ++i)
     {
-      gsl_test_rel(x[i], helical_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], helical_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_jennrich.c b/multifit/test_jennrich.c
index e129cfb..9f6198d 100644
--- a/multifit/test_jennrich.c
+++ b/multifit/test_jennrich.c
@@ -21,7 +21,7 @@ jennrich_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < jennrich_P; ++i)
     {
-      gsl_test_rel(x[i], jennrich_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], jennrich_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_kirby2.c b/multifit/test_kirby2.c
index 5c6fcb0..4d25ea3 100644
--- a/multifit/test_kirby2.c
+++ b/multifit/test_kirby2.c
@@ -342,7 +342,7 @@ kirby2_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < kirby2_P; ++i)
     {
-      gsl_test_rel(x[i], kirby2_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], kirby2_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_kowalik.c b/multifit/test_kowalik.c
index c68a645..df53861 100644
--- a/multifit/test_kowalik.c
+++ b/multifit/test_kowalik.c
@@ -57,7 +57,7 @@ kowalik_checksol(const double x[], const double sumsq,
       if (!gsl_finite(kowalik_x[i]))
         continue;
 
-      gsl_test_rel(x[i], kowalik_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], kowalik_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_lin1.c b/multifit/test_lin1.c
index 2c28ab8d..2b94a83 100644
--- a/multifit/test_lin1.c
+++ b/multifit/test_lin1.c
@@ -19,7 +19,7 @@ lin1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < lin1_P; ++i)
     {
-      gsl_test_rel(x[i], -1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], -1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_longley.c b/multifit/test_longley.c
index 8ac4856..111b8cf 100644
--- a/multifit/test_longley.c
+++ b/multifit/test_longley.c
@@ -37,14 +37,14 @@ test_longley_results(const char *str,
       gsl_test_rel (gsl_vector_get(c,i),
                     gsl_vector_get(expected_c, i),
                     1.0e-10,
-                    "%s c[%zu]", str, i) ;
+                    "%s c["F_ZU"]", str, i) ;
 
       if (cov_diag && expected_sd)
         {
           gsl_test_rel (sqrt(gsl_vector_get(cov_diag, i)),
                         gsl_vector_get(expected_sd, i),
                         1e-10,
-                        "%s cov[%zu,%zu]", str, i, i);
+                        "%s cov["F_ZU","F_ZU"]", str, i, i);
         }
     }
 
diff --git a/multifit/test_meyer.c b/multifit/test_meyer.c
index 2709c0f..f34cccb 100644
--- a/multifit/test_meyer.c
+++ b/multifit/test_meyer.c
@@ -28,7 +28,7 @@ meyer_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < meyer_P; ++i)
     {
-      gsl_test_rel(x[i], meyer_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], meyer_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_meyerscal.c b/multifit/test_meyerscal.c
index d75f3f9..48efa80 100644
--- a/multifit/test_meyerscal.c
+++ b/multifit/test_meyerscal.c
@@ -28,7 +28,7 @@ meyerscal_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < meyerscal_P; ++i)
     {
-      gsl_test_rel(x[i], meyerscal_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], meyerscal_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_nonlinear.c b/multifit/test_nonlinear.c
index d01f8f3..fcaf4e6 100644
--- a/multifit/test_nonlinear.c
+++ b/multifit/test_nonlinear.c
@@ -508,12 +508,12 @@ test_fdfridge(const gsl_multifit_fdfsolver_type * T, const double xtol,
 
         if (fabs(xi) < eps)
           {
-            gsl_test_abs(yi, xi, eps, "%s/%s ridge lambda=%g i=%zu",
+            gsl_test_abs(yi, xi, eps, "%s/%s ridge lambda=%g i="F_ZU,
                          sname, pname, lambda, i);
           }
         else
           {
-            gsl_test_rel(yi, xi, eps, "%s/%s ridge lambda=%g i=%zu",
+            gsl_test_rel(yi, xi, eps, "%s/%s ridge lambda=%g i="F_ZU,
                          sname, pname, lambda, i);
           }
       }
diff --git a/multifit/test_pontius.c b/multifit/test_pontius.c
index d327225..1351279 100644
--- a/multifit/test_pontius.c
+++ b/multifit/test_pontius.c
@@ -30,14 +30,14 @@ test_pontius_results(const char *str,
       gsl_test_rel (gsl_vector_get(c,i),
                     gsl_vector_get(expected_c, i),
                     1.0e-10,
-                    "%s c[%zu]", str, i) ;
+                    "%s c["F_ZU"]", str, i) ;
 
       if (cov_diag && expected_sd)
         {
           gsl_test_rel (sqrt(gsl_vector_get(cov_diag, i)),
                         gsl_vector_get(expected_sd, i),
                         1e-10,
-                        "%s cov[%zu,%zu]", str, i, i);
+                        "%s cov["F_ZU","F_ZU"]", str, i, i);
         }
     }
 
diff --git a/multifit/test_powell1.c b/multifit/test_powell1.c
index 572de3b..be0f0f4 100644
--- a/multifit/test_powell1.c
+++ b/multifit/test_powell1.c
@@ -19,7 +19,7 @@ powell1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell1_P; ++i)
     {
-      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_powell2.c b/multifit/test_powell2.c
index 05a4417..8b46b00 100644
--- a/multifit/test_powell2.c
+++ b/multifit/test_powell2.c
@@ -19,7 +19,7 @@ powell2_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell2_P; ++i)
     {
-      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_powell3.c b/multifit/test_powell3.c
index 7c83384..094ba9d 100644
--- a/multifit/test_powell3.c
+++ b/multifit/test_powell3.c
@@ -21,7 +21,7 @@ powell3_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell3_P; ++i)
     {
-      gsl_test_rel(x[i], powell3_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], powell3_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_rat42.c b/multifit/test_rat42.c
index 32a652b..99ef13a 100644
--- a/multifit/test_rat42.c
+++ b/multifit/test_rat42.c
@@ -33,7 +33,7 @@ rat42_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rat42_P; ++i)
     {
-      gsl_test_rel(x[i], rat42_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rat42_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_rat43.c b/multifit/test_rat43.c
index 2566926..aafa60e 100644
--- a/multifit/test_rat43.c
+++ b/multifit/test_rat43.c
@@ -33,7 +33,7 @@ rat43_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rat43_P; ++i)
     {
-      gsl_test_rel(x[i], rat43_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rat43_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_reg.c b/multifit/test_reg.c
index 9bd95f4..c29eed2 100644
--- a/multifit/test_reg.c
+++ b/multifit/test_reg.c
@@ -91,7 +91,7 @@ test_reg1(const gsl_matrix * X, const gsl_vector * y,
     }
 
   gsl_test_rel(rnorm*rnorm, chisq, tol,
-               "test_reg1: %s, lambda = 0, n=%zu p=%zu chisq", desc, n, p);
+               "test_reg1: %s, lambda = 0, n="F_ZU" p="F_ZU" chisq", desc, n, p);
 
   /* test c0 = c1 */
   for (j = 0; j < p; ++j)
@@ -99,7 +99,7 @@ test_reg1(const gsl_matrix * X, const gsl_vector * y,
       double c0j = gsl_vector_get(c0, j);
       double c1j = gsl_vector_get(c1, j);
 
-      gsl_test_rel(c1j, c0j, tol, "test_reg1: %s, lambda = 0, n=%zu p=%zu c0/c1",
+      gsl_test_rel(c1j, c0j, tol, "test_reg1: %s, lambda = 0, n="F_ZU" p="F_ZU" c0/c1",
                    desc, n, p);
     }
 
@@ -153,14 +153,14 @@ test_reg2(const double lambda, const gsl_matrix * X, const gsl_vector * y,
 
   /* test snorm = ||c1|| */
   snorm1 = gsl_blas_dnrm2(c1);
-  gsl_test_rel(snorm0, snorm1, tol, "test_reg2: %s, snorm lambda=%g n=%zu p=%zu",
+  gsl_test_rel(snorm0, snorm1, tol, "test_reg2: %s, snorm lambda=%g n="F_ZU" p="F_ZU,
                desc, lambda, n, p);
 
   /* test rnorm = ||y - X c1|| */
   gsl_vector_memcpy(r, ys);
   gsl_blas_dgemv(CblasNoTrans, -1.0, Xs, c1, 1.0, r);
   rnorm1 = gsl_blas_dnrm2(r);
-  gsl_test_rel(rnorm0, rnorm1, tol, "test_reg2: %s, rnorm lambda=%g n=%zu p=%zu",
+  gsl_test_rel(rnorm0, rnorm1, tol, "test_reg2: %s, rnorm lambda=%g n="F_ZU" p="F_ZU,
                desc, lambda, n, p);
 
   /* test c0 = c1 */
@@ -169,7 +169,7 @@ test_reg2(const double lambda, const gsl_matrix * X, const gsl_vector * y,
       double c0j = gsl_vector_get(c0, j);
       double c1j = gsl_vector_get(c1, j);
 
-      gsl_test_rel(c1j, c0j, tol, "test_reg2: %s, c0/c1 lambda=%g n=%zu p=%zu",
+      gsl_test_rel(c1j, c0j, tol, "test_reg2: %s, c0/c1 lambda=%g n="F_ZU" p="F_ZU,
                    desc, lambda, n, p);
     }
 
@@ -235,7 +235,7 @@ test_reg3(const double lambda, const gsl_vector * L, const gsl_matrix * X,
   gsl_vector_memcpy(Lc, c1);
   gsl_vector_mul(Lc, L);
   snorm1 = gsl_blas_dnrm2(Lc);
-  gsl_test_rel(snorm0, snorm1, tol, "test_reg3: %s, snorm lambda=%g n=%zu p=%zu",
+  gsl_test_rel(snorm0, snorm1, tol, "test_reg3: %s, snorm lambda=%g n="F_ZU" p="F_ZU,
                desc, lambda, n, p);
 
   /* test rnorm = ||y - X c1||, compute again Xs = sqrt(W) X and ys = sqrt(W) y */
@@ -243,7 +243,7 @@ test_reg3(const double lambda, const gsl_vector * L, const gsl_matrix * X,
   gsl_vector_memcpy(r, ys);
   gsl_blas_dgemv(CblasNoTrans, -1.0, Xs, c1, 1.0, r);
   rnorm1 = gsl_blas_dnrm2(r);
-  gsl_test_rel(rnorm0, rnorm1, tol, "test_reg3: %s, rnorm lambda=%g n=%zu p=%zu",
+  gsl_test_rel(rnorm0, rnorm1, tol, "test_reg3: %s, rnorm lambda=%g n="F_ZU" p="F_ZU,
                desc, lambda, n, p);
 
   /* test c0 = c1 */
@@ -252,7 +252,7 @@ test_reg3(const double lambda, const gsl_vector * L, const gsl_matrix * X,
       double c0j = gsl_vector_get(c0, j);
       double c1j = gsl_vector_get(c1, j);
 
-      gsl_test_rel(c1j, c0j, tol, "test_reg3: %s, c0/c1 j=%zu lambda=%g n=%zu p=%zu",
+      gsl_test_rel(c1j, c0j, tol, "test_reg3: %s, c0/c1 j="F_ZU" lambda=%g n="F_ZU" p="F_ZU,
                    desc, j, lambda, n, p);
     }
 
@@ -340,7 +340,7 @@ test_reg4(const double lambda, const gsl_matrix * L, const gsl_matrix * X,
       double c0j = gsl_vector_get(c0, j);
       double c1j = gsl_vector_get(c1, j);
 
-      gsl_test_rel(c1j, c0j, tol, "test_reg4: %s lambda=%g n=%zu p=%zu j=%zu",
+      gsl_test_rel(c1j, c0j, tol, "test_reg4: %s lambda=%g n="F_ZU" p="F_ZU" j="F_ZU,
                    desc, lambda, n, p, j);
     }
 
@@ -518,7 +518,7 @@ test_reg_sobolev(const size_t p, const size_t kmax, const gsl_rng *r)
               double aij = gsl_matrix_get(LTL, i, j);
               double bij = gsl_matrix_get(LTL2, i, j);
 
-              gsl_test_rel(aij, bij, tol, "sobolov k=%zu LTL(%zu,%zu)", k, i, j);
+              gsl_test_rel(aij, bij, tol, "sobolov k="F_ZU" LTL("F_ZU","F_ZU")", k, i, j);
             }
         }
 
diff --git a/multifit/test_rosenbrock.c b/multifit/test_rosenbrock.c
index d42806e..559351c 100644
--- a/multifit/test_rosenbrock.c
+++ b/multifit/test_rosenbrock.c
@@ -19,7 +19,7 @@ rosenbrock_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rosenbrock_P; ++i)
     {
-      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_rosenbrocke.c b/multifit/test_rosenbrocke.c
index fca65fc..6f3e3c7 100644
--- a/multifit/test_rosenbrocke.c
+++ b/multifit/test_rosenbrocke.c
@@ -23,7 +23,7 @@ rosenbrocke_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rosenbrocke_P; ++i)
     {
-      gsl_test_rel(x[i], rosenbrocke_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rosenbrocke_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_roth.c b/multifit/test_roth.c
index 87f7ae0..c4ec9e1 100644
--- a/multifit/test_roth.c
+++ b/multifit/test_roth.c
@@ -35,7 +35,7 @@ roth_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < roth_P; ++i)
     {
-      gsl_test_rel(x[i], roth_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], roth_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_shaw.c b/multifit/test_shaw.c
index b0120f1..a4529d1 100644
--- a/multifit/test_shaw.c
+++ b/multifit/test_shaw.c
@@ -118,9 +118,9 @@ test_shaw_system(gsl_rng *rng_p, const size_t n, const size_t p,
 
       /* solve regularized system and check for consistent rho/eta values */
       gsl_multifit_linear_solve(lami, X, y, c, &rnorm, &snorm, work);
-      gsl_test_rel(rhoi, rnorm, tol3, "shaw rho n=%zu p=%zu lambda=%e",
+      gsl_test_rel(rhoi, rnorm, tol3, "shaw rho n="F_ZU" p="F_ZU" lambda=%e",
                    n, p, lami);
-      gsl_test_rel(etai, snorm, tol1, "shaw eta n=%zu p=%zu lambda=%e",
+      gsl_test_rel(etai, snorm, tol1, "shaw eta n="F_ZU" p="F_ZU" lambda=%e",
                    n, p, lami);
     }
 
@@ -133,7 +133,7 @@ test_shaw_system(gsl_rng *rng_p, const size_t n, const size_t p,
   if (lambda_expected > 0.0)
     {
       gsl_test_rel(lambda, lambda_expected, tol1,
-                   "shaw: n=%zu p=%zu L-curve corner lambda",
+                   "shaw: n="F_ZU" p="F_ZU" L-curve corner lambda",
                    n, p);
     }
 
@@ -146,11 +146,11 @@ test_shaw_system(gsl_rng *rng_p, const size_t n, const size_t p,
 
   /* test rnorm value */
   gsl_test_rel(rnorm, gsl_blas_dnrm2(r), tol2,
-               "shaw: n=%zu p=%zu rnorm", n, p);
+               "shaw: n="F_ZU" p="F_ZU" rnorm", n, p);
 
   /* test snorm value */
   gsl_test_rel(snorm, gsl_blas_dnrm2(c), tol2,
-               "shaw: n=%zu p=%zu snorm", n, p);
+               "shaw: n="F_ZU" p="F_ZU" snorm", n, p);
 
   gsl_matrix_free(X);
   gsl_matrix_free(cov);
diff --git a/multifit/test_thurber.c b/multifit/test_thurber.c
index fd07309..2eb8d6b 100644
--- a/multifit/test_thurber.c
+++ b/multifit/test_thurber.c
@@ -49,7 +49,7 @@ thurber_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < thurber_P; ++i)
     {
-      gsl_test_rel(x[i], thurber_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], thurber_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_vardim.c b/multifit/test_vardim.c
index 03dda5c..23e880a 100644
--- a/multifit/test_vardim.c
+++ b/multifit/test_vardim.c
@@ -20,7 +20,7 @@ vardim_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < vardim_P; ++i)
     {
-      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_watson.c b/multifit/test_watson.c
index cd7c663..9fd621c 100644
--- a/multifit/test_watson.c
+++ b/multifit/test_watson.c
@@ -22,7 +22,7 @@ watson_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < watson_P; ++i)
     {
-      gsl_test_rel(x[i], watson_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], watson_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_wnlin.c b/multifit/test_wnlin.c
index a11d7b34..ffc0f50 100644
--- a/multifit/test_wnlin.c
+++ b/multifit/test_wnlin.c
@@ -48,7 +48,7 @@ wnlin_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < wnlin_P; ++i)
     {
-      gsl_test_rel(x[i], wnlin_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], wnlin_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit/test_wood.c b/multifit/test_wood.c
index e2b6ad3..871dc68 100644
--- a/multifit/test_wood.c
+++ b/multifit/test_wood.c
@@ -20,7 +20,7 @@ wood_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < wood_P; ++i)
     {
-      gsl_test_rel(x[i], wood_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], wood_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_bard.c b/multifit_nlinear/test_bard.c
index e5eca77..2c28ab82 100644
--- a/multifit_nlinear/test_bard.c
+++ b/multifit_nlinear/test_bard.c
@@ -48,7 +48,7 @@ bard_checksol(const double x[], const double sumsq,
       if (!gsl_finite(bard_x[i]))
         continue;
 
-      gsl_test_rel(x[i], bard_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], bard_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_beale.c b/multifit_nlinear/test_beale.c
index f4bbeb6..5c94c1e 100644
--- a/multifit_nlinear/test_beale.c
+++ b/multifit_nlinear/test_beale.c
@@ -20,7 +20,7 @@ beale_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < beale_P; ++i)
     {
-      gsl_test_rel(x[i], beale_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], beale_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_biggs.c b/multifit_nlinear/test_biggs.c
index 4fae137..0ee10a6 100644
--- a/multifit_nlinear/test_biggs.c
+++ b/multifit_nlinear/test_biggs.c
@@ -21,7 +21,7 @@ biggs_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < biggs_P; ++i)
     {
-      gsl_test_rel(x[i], biggs_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], biggs_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_boxbod.c b/multifit_nlinear/test_boxbod.c
index b2aa2fa..3fe6b35 100644
--- a/multifit_nlinear/test_boxbod.c
+++ b/multifit_nlinear/test_boxbod.c
@@ -29,7 +29,7 @@ boxbod_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < boxbod_P; ++i)
     {
-      gsl_test_rel(x[i], boxbod_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], boxbod_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_brown1.c b/multifit_nlinear/test_brown1.c
index d801770..ccc4630 100644
--- a/multifit_nlinear/test_brown1.c
+++ b/multifit_nlinear/test_brown1.c
@@ -20,7 +20,7 @@ brown1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < brown1_P; ++i)
     {
-      gsl_test_rel(x[i], brown1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], brown1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_brown2.c b/multifit_nlinear/test_brown2.c
index f3994d5..600185b 100644
--- a/multifit_nlinear/test_brown2.c
+++ b/multifit_nlinear/test_brown2.c
@@ -42,7 +42,7 @@ brown2_checksol(const double x[], const double sumsq,
 
   for (i = 1; i < brown2_P - 1; ++i)
     {
-      gsl_test_rel(x[i], alpha, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], alpha, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 
diff --git a/multifit_nlinear/test_brown3.c b/multifit_nlinear/test_brown3.c
index 7965c7b..7e833b7 100644
--- a/multifit_nlinear/test_brown3.c
+++ b/multifit_nlinear/test_brown3.c
@@ -18,7 +18,7 @@ brown3_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < brown3_P; ++i)
     {
-      gsl_test_rel(x[i], brown3_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], brown3_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_eckerle.c b/multifit_nlinear/test_eckerle.c
index 59bdaf7..0e980fa 100644
--- a/multifit_nlinear/test_eckerle.c
+++ b/multifit_nlinear/test_eckerle.c
@@ -59,7 +59,7 @@ eckerle_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < eckerle_P; ++i)
     {
-      gsl_test_rel(new_x[i], eckerle_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(new_x[i], eckerle_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_enso.c b/multifit_nlinear/test_enso.c
index 93fb3ef..ae33ceb 100644
--- a/multifit_nlinear/test_enso.c
+++ b/multifit_nlinear/test_enso.c
@@ -65,7 +65,7 @@ enso_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < enso_P; ++i)
     {
-      gsl_test_rel(x[i], enso_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], enso_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_exp1.c b/multifit_nlinear/test_exp1.c
index 62b9d11..6b2076c 100644
--- a/multifit_nlinear/test_exp1.c
+++ b/multifit_nlinear/test_exp1.c
@@ -30,7 +30,7 @@ exp1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < exp1_P; ++i)
     {
-      gsl_test_rel(x[i], exp1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], exp1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_gaussian.c b/multifit_nlinear/test_gaussian.c
index f2039f8..b899282 100644
--- a/multifit_nlinear/test_gaussian.c
+++ b/multifit_nlinear/test_gaussian.c
@@ -25,7 +25,7 @@ gaussian_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < gaussian_P; ++i)
     {
-      gsl_test_rel(x[i], gaussian_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], gaussian_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_hahn1.c b/multifit_nlinear/test_hahn1.c
index 50fafdd..f34b185 100644
--- a/multifit_nlinear/test_hahn1.c
+++ b/multifit_nlinear/test_hahn1.c
@@ -131,7 +131,7 @@ hahn1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < hahn1_P; ++i)
     {
-      gsl_test_rel(x[i], hahn1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], hahn1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_helical.c b/multifit_nlinear/test_helical.c
index b3b2ef7..5ad880b 100644
--- a/multifit_nlinear/test_helical.c
+++ b/multifit_nlinear/test_helical.c
@@ -19,7 +19,7 @@ helical_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < helical_P; ++i)
     {
-      gsl_test_rel(x[i], helical_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], helical_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_jennrich.c b/multifit_nlinear/test_jennrich.c
index 16a29af..518bdfe 100644
--- a/multifit_nlinear/test_jennrich.c
+++ b/multifit_nlinear/test_jennrich.c
@@ -19,7 +19,7 @@ jennrich_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < jennrich_P; ++i)
     {
-      gsl_test_rel(x[i], jennrich_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], jennrich_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_kirby2.c b/multifit_nlinear/test_kirby2.c
index b0b405f..ad3833b 100644
--- a/multifit_nlinear/test_kirby2.c
+++ b/multifit_nlinear/test_kirby2.c
@@ -95,7 +95,7 @@ kirby2_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < kirby2_P; ++i)
     {
-      gsl_test_rel(x[i], kirby2_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], kirby2_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_kowalik.c b/multifit_nlinear/test_kowalik.c
index 3edbf42..5d24181 100644
--- a/multifit_nlinear/test_kowalik.c
+++ b/multifit_nlinear/test_kowalik.c
@@ -58,7 +58,7 @@ kowalik_checksol(const double x[], const double sumsq,
       if (!gsl_finite(kowalik_x[i]))
         continue;
 
-      gsl_test_rel(x[i], kowalik_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], kowalik_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_lin1.c b/multifit_nlinear/test_lin1.c
index 1cba5da..f6dbe48 100644
--- a/multifit_nlinear/test_lin1.c
+++ b/multifit_nlinear/test_lin1.c
@@ -17,7 +17,7 @@ lin1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < lin1_P; ++i)
     {
-      gsl_test_rel(x[i], -1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], -1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_meyer.c b/multifit_nlinear/test_meyer.c
index 4141b33..a147a14 100644
--- a/multifit_nlinear/test_meyer.c
+++ b/multifit_nlinear/test_meyer.c
@@ -26,7 +26,7 @@ meyer_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < meyer_P; ++i)
     {
-      gsl_test_rel(x[i], meyer_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], meyer_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_meyerscal.c b/multifit_nlinear/test_meyerscal.c
index b0e0934..acca758 100644
--- a/multifit_nlinear/test_meyerscal.c
+++ b/multifit_nlinear/test_meyerscal.c
@@ -26,7 +26,7 @@ meyerscal_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < meyerscal_P; ++i)
     {
-      gsl_test_rel(x[i], meyerscal_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], meyerscal_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_powell1.c b/multifit_nlinear/test_powell1.c
index 0580eb9..5a94829 100644
--- a/multifit_nlinear/test_powell1.c
+++ b/multifit_nlinear/test_powell1.c
@@ -17,7 +17,7 @@ powell1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell1_P; ++i)
     {
-      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_powell2.c b/multifit_nlinear/test_powell2.c
index 08c4a11..040a3e1 100644
--- a/multifit_nlinear/test_powell2.c
+++ b/multifit_nlinear/test_powell2.c
@@ -17,7 +17,7 @@ powell2_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell2_P; ++i)
     {
-      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_powell3.c b/multifit_nlinear/test_powell3.c
index aeb333e..a7427d3 100644
--- a/multifit_nlinear/test_powell3.c
+++ b/multifit_nlinear/test_powell3.c
@@ -19,7 +19,7 @@ powell3_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell3_P; ++i)
     {
-      gsl_test_rel(x[i], powell3_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], powell3_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_rat42.c b/multifit_nlinear/test_rat42.c
index 28ec604..1e866c4 100644
--- a/multifit_nlinear/test_rat42.c
+++ b/multifit_nlinear/test_rat42.c
@@ -32,7 +32,7 @@ rat42_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rat42_P; ++i)
     {
-      gsl_test_rel(x[i], rat42_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rat42_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_rat43.c b/multifit_nlinear/test_rat43.c
index 0831c61..993ed6c 100644
--- a/multifit_nlinear/test_rat43.c
+++ b/multifit_nlinear/test_rat43.c
@@ -32,7 +32,7 @@ rat43_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rat43_P; ++i)
     {
-      gsl_test_rel(x[i], rat43_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rat43_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_rosenbrock.c b/multifit_nlinear/test_rosenbrock.c
index 23f5e7a..d8f12f9 100644
--- a/multifit_nlinear/test_rosenbrock.c
+++ b/multifit_nlinear/test_rosenbrock.c
@@ -17,7 +17,7 @@ rosenbrock_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rosenbrock_P; ++i)
     {
-      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_rosenbrocke.c b/multifit_nlinear/test_rosenbrocke.c
index 97e6168..ad4e87d 100644
--- a/multifit_nlinear/test_rosenbrocke.c
+++ b/multifit_nlinear/test_rosenbrocke.c
@@ -20,7 +20,7 @@ rosenbrocke_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rosenbrocke_P; ++i)
     {
-      gsl_test_rel(x[i], rosenbrocke_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rosenbrocke_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_roth.c b/multifit_nlinear/test_roth.c
index de54ba1..416941e 100644
--- a/multifit_nlinear/test_roth.c
+++ b/multifit_nlinear/test_roth.c
@@ -33,7 +33,7 @@ roth_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < roth_P; ++i)
     {
-      gsl_test_rel(x[i], roth_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], roth_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_thurber.c b/multifit_nlinear/test_thurber.c
index 4eb38df..4640c8e 100644
--- a/multifit_nlinear/test_thurber.c
+++ b/multifit_nlinear/test_thurber.c
@@ -48,7 +48,7 @@ thurber_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < thurber_P; ++i)
     {
-      gsl_test_rel(x[i], thurber_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], thurber_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_vardim.c b/multifit_nlinear/test_vardim.c
index 5074b36..a35e830 100644
--- a/multifit_nlinear/test_vardim.c
+++ b/multifit_nlinear/test_vardim.c
@@ -17,7 +17,7 @@ vardim_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < vardim_P; ++i)
     {
-      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_watson.c b/multifit_nlinear/test_watson.c
index ea26ad4..606be58 100644
--- a/multifit_nlinear/test_watson.c
+++ b/multifit_nlinear/test_watson.c
@@ -20,7 +20,7 @@ watson_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < watson_P; ++i)
     {
-      gsl_test_rel(x[i], watson_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], watson_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_wnlin.c b/multifit_nlinear/test_wnlin.c
index c971092..f74b27e 100644
--- a/multifit_nlinear/test_wnlin.c
+++ b/multifit_nlinear/test_wnlin.c
@@ -48,7 +48,7 @@ wnlin_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < wnlin_P; ++i)
     {
-      gsl_test_rel(x[i], wnlin_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], wnlin_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multifit_nlinear/test_wood.c b/multifit_nlinear/test_wood.c
index c114a39..8838071 100644
--- a/multifit_nlinear/test_wood.c
+++ b/multifit_nlinear/test_wood.c
@@ -18,7 +18,7 @@ wood_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < wood_P; ++i)
     {
-      gsl_test_rel(x[i], wood_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], wood_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge/test.c b/multilarge/test.c
index 02651e5..8600dd1 100644
--- a/multilarge/test.c
+++ b/multilarge/test.c
@@ -180,7 +180,7 @@ test_compare_vectors(const double tol, const gsl_vector * a,
       double ai = gsl_vector_get(a, i);
       double bi = gsl_vector_get(b, i);
 
-      gsl_test_rel(bi, ai, tol, "%s i=%zu", desc, i);
+      gsl_test_rel(bi, ai, tol, "%s i="F_ZU, desc, i);
     }
 }
 
@@ -386,7 +386,7 @@ test_random(const gsl_multilarge_linear_type * T,
         test_multifit_solve(lambda, X, y, NULL, NULL, NULL, &rnorm0, &snorm0, c0);
         test_multilarge_solve(T, lambda, X, y, NULL, NULL, NULL, &rnorm1, &snorm1, c1);
 
-        sprintf(str, "random %s unweighted stdform n=%zu p=%zu lambda=%g",
+        sprintf(str, "random %s unweighted stdform n="F_ZU" p="F_ZU" lambda=%g",
                 T->name, n, p, lambda);
         test_compare_vectors(tol, c0, c1, str);
 
@@ -399,7 +399,7 @@ test_random(const gsl_multilarge_linear_type * T,
         test_multifit_solve(lambda, X, y, w, diagL, NULL, &rnorm0, &snorm0, c0);
         test_multilarge_solve(T, lambda, X, y, w, diagL, NULL, &rnorm1, &snorm1, c1);
 
-        sprintf(str, "random %s weighted diag(L) n=%zu p=%zu lambda=%g",
+        sprintf(str, "random %s weighted diag(L) n="F_ZU" p="F_ZU" lambda=%g",
                 T->name, n, p, lambda);
         test_compare_vectors(tol, c0, c1, str);
 
@@ -412,7 +412,7 @@ test_random(const gsl_multilarge_linear_type * T,
         test_multifit_solve(lambda, X, y, NULL, diagL, NULL, &rnorm0, &snorm0, c0);
         test_multilarge_solve(T, lambda, X, y, NULL, diagL, NULL, &rnorm1, &snorm1, c1);
 
-        sprintf(str, "random %s unweighted diag(L) n=%zu p=%zu lambda=%g",
+        sprintf(str, "random %s unweighted diag(L) n="F_ZU" p="F_ZU" lambda=%g",
                 T->name, n, p, lambda);
         test_compare_vectors(tol, c0, c1, str);
 
@@ -425,7 +425,7 @@ test_random(const gsl_multilarge_linear_type * T,
         test_multifit_solve(lambda, X, y, w, NULL, Lsqr, &rnorm0, &snorm0, c0);
         test_multilarge_solve(T, lambda, X, y, w, NULL, Lsqr, &rnorm1, &snorm1, c1);
 
-        sprintf(str, "random %s weighted Lsqr n=%zu p=%zu lambda=%g",
+        sprintf(str, "random %s weighted Lsqr n="F_ZU" p="F_ZU" lambda=%g",
                 T->name, n, p, lambda);
         test_compare_vectors(tol, c0, c1, str);
 
@@ -438,7 +438,7 @@ test_random(const gsl_multilarge_linear_type * T,
         test_multifit_solve(lambda, X, y, NULL, NULL, Lsqr, &rnorm0, &snorm0, c0);
         test_multilarge_solve(T, lambda, X, y, NULL, NULL, Lsqr, &rnorm1, &snorm1, c1);
 
-        sprintf(str, "random %s unweighted Lsqr n=%zu p=%zu lambda=%g",
+        sprintf(str, "random %s unweighted Lsqr n="F_ZU" p="F_ZU" lambda=%g",
                 T->name, n, p, lambda);
         test_compare_vectors(tol, c0, c1, str);
 
@@ -451,7 +451,7 @@ test_random(const gsl_multilarge_linear_type * T,
         test_multifit_solve(lambda, X, y, w, NULL, Ltall, &rnorm0, &snorm0, c0);
         test_multilarge_solve(T, lambda, X, y, w, NULL, Ltall, &rnorm1, &snorm1, c1);
 
-        sprintf(str, "random %s weighted Ltall n=%zu p=%zu lambda=%g",
+        sprintf(str, "random %s weighted Ltall n="F_ZU" p="F_ZU" lambda=%g",
                 T->name, n, p, lambda);
         test_compare_vectors(tol, c0, c1, str);
 
@@ -464,7 +464,7 @@ test_random(const gsl_multilarge_linear_type * T,
         test_multifit_solve(lambda, X, y, NULL, NULL, Ltall, &rnorm0, &snorm0, c0);
         test_multilarge_solve(T, lambda, X, y, NULL, NULL, Ltall, &rnorm1, &snorm1, c1);
 
-        sprintf(str, "random %s unweighted Ltall n=%zu p=%zu lambda=%g",
+        sprintf(str, "random %s unweighted Ltall n="F_ZU" p="F_ZU" lambda=%g",
                 T->name, n, p, lambda);
         test_compare_vectors(tol, c0, c1, str);
 
diff --git a/multilarge_nlinear/test_bard.c b/multilarge_nlinear/test_bard.c
index c3c74ab..c7192b7 100644
--- a/multilarge_nlinear/test_bard.c
+++ b/multilarge_nlinear/test_bard.c
@@ -47,7 +47,7 @@ bard_checksol(const double x[], const double sumsq,
       if (!gsl_finite(bard_x[i]))
         continue;
 
-      gsl_test_rel(x[i], bard_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], bard_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_beale.c b/multilarge_nlinear/test_beale.c
index d7f6ab6..108c9c4 100644
--- a/multilarge_nlinear/test_beale.c
+++ b/multilarge_nlinear/test_beale.c
@@ -22,7 +22,7 @@ beale_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < beale_P; ++i)
     {
-      gsl_test_rel(x[i], beale_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], beale_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_boxbod.c b/multilarge_nlinear/test_boxbod.c
index 9454aa9..085986a 100644
--- a/multilarge_nlinear/test_boxbod.c
+++ b/multilarge_nlinear/test_boxbod.c
@@ -31,7 +31,7 @@ boxbod_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < boxbod_P; ++i)
     {
-      gsl_test_rel(x[i], boxbod_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], boxbod_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_brown1.c b/multilarge_nlinear/test_brown1.c
index 167c7c0..0213e2a 100644
--- a/multilarge_nlinear/test_brown1.c
+++ b/multilarge_nlinear/test_brown1.c
@@ -22,7 +22,7 @@ brown1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < brown1_P; ++i)
     {
-      gsl_test_rel(x[i], brown1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], brown1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_brown2.c b/multilarge_nlinear/test_brown2.c
index b454277..596b2c2 100644
--- a/multilarge_nlinear/test_brown2.c
+++ b/multilarge_nlinear/test_brown2.c
@@ -44,7 +44,7 @@ brown2_checksol(const double x[], const double sumsq,
 
   for (i = 1; i < brown2_P - 1; ++i)
     {
-      gsl_test_rel(x[i], alpha, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], alpha, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 
diff --git a/multilarge_nlinear/test_brown3.c b/multilarge_nlinear/test_brown3.c
index 5303595..f53b9e8 100644
--- a/multilarge_nlinear/test_brown3.c
+++ b/multilarge_nlinear/test_brown3.c
@@ -20,7 +20,7 @@ brown3_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < brown3_P; ++i)
     {
-      gsl_test_rel(x[i], brown3_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], brown3_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_eckerle.c b/multilarge_nlinear/test_eckerle.c
index 326a08e..f04ad54 100644
--- a/multilarge_nlinear/test_eckerle.c
+++ b/multilarge_nlinear/test_eckerle.c
@@ -61,7 +61,7 @@ eckerle_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < eckerle_P; ++i)
     {
-      gsl_test_rel(new_x[i], eckerle_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(new_x[i], eckerle_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_enso.c b/multilarge_nlinear/test_enso.c
index 9cc3e1a..d743182 100644
--- a/multilarge_nlinear/test_enso.c
+++ b/multilarge_nlinear/test_enso.c
@@ -66,7 +66,7 @@ enso_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < enso_P; ++i)
     {
-      gsl_test_rel(x[i], enso_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], enso_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_exp1.c b/multilarge_nlinear/test_exp1.c
index 7455bd6..3a0c527 100644
--- a/multilarge_nlinear/test_exp1.c
+++ b/multilarge_nlinear/test_exp1.c
@@ -32,7 +32,7 @@ exp1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < exp1_P; ++i)
     {
-      gsl_test_rel(x[i], exp1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], exp1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_gaussian.c b/multilarge_nlinear/test_gaussian.c
index db48192..8eed673 100644
--- a/multilarge_nlinear/test_gaussian.c
+++ b/multilarge_nlinear/test_gaussian.c
@@ -27,7 +27,7 @@ gaussian_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < gaussian_P; ++i)
     {
-      gsl_test_rel(x[i], gaussian_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], gaussian_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_hahn1.c b/multilarge_nlinear/test_hahn1.c
index 9cbf133..0500dae 100644
--- a/multilarge_nlinear/test_hahn1.c
+++ b/multilarge_nlinear/test_hahn1.c
@@ -132,7 +132,7 @@ hahn1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < hahn1_P; ++i)
     {
-      gsl_test_rel(x[i], hahn1_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], hahn1_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_helical.c b/multilarge_nlinear/test_helical.c
index 0e7f646..c26d692 100644
--- a/multilarge_nlinear/test_helical.c
+++ b/multilarge_nlinear/test_helical.c
@@ -20,7 +20,7 @@ helical_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < helical_P; ++i)
     {
-      gsl_test_rel(x[i], helical_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], helical_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_jennrich.c b/multilarge_nlinear/test_jennrich.c
index 3a43504..2918589 100644
--- a/multilarge_nlinear/test_jennrich.c
+++ b/multilarge_nlinear/test_jennrich.c
@@ -21,7 +21,7 @@ jennrich_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < jennrich_P; ++i)
     {
-      gsl_test_rel(x[i], jennrich_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], jennrich_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_kirby2.c b/multilarge_nlinear/test_kirby2.c
index 3aeedae..3d6b1b8 100644
--- a/multilarge_nlinear/test_kirby2.c
+++ b/multilarge_nlinear/test_kirby2.c
@@ -96,7 +96,7 @@ kirby2_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < kirby2_P; ++i)
     {
-      gsl_test_rel(x[i], kirby2_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], kirby2_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_kowalik.c b/multilarge_nlinear/test_kowalik.c
index 0cef546..c6affa3 100644
--- a/multilarge_nlinear/test_kowalik.c
+++ b/multilarge_nlinear/test_kowalik.c
@@ -56,7 +56,7 @@ kowalik_checksol(const double x[], const double sumsq,
       if (!gsl_finite(kowalik_x[i]))
         continue;
 
-      gsl_test_rel(x[i], kowalik_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], kowalik_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_lin1.c b/multilarge_nlinear/test_lin1.c
index f488399..e676aaf 100644
--- a/multilarge_nlinear/test_lin1.c
+++ b/multilarge_nlinear/test_lin1.c
@@ -19,7 +19,7 @@ lin1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < lin1_P; ++i)
     {
-      gsl_test_rel(x[i], -1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], -1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_meyer.c b/multilarge_nlinear/test_meyer.c
index 29210b5..33acac6 100644
--- a/multilarge_nlinear/test_meyer.c
+++ b/multilarge_nlinear/test_meyer.c
@@ -28,7 +28,7 @@ meyer_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < meyer_P; ++i)
     {
-      gsl_test_rel(x[i], meyer_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], meyer_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_meyerscal.c b/multilarge_nlinear/test_meyerscal.c
index 3d33765..6dc7767 100644
--- a/multilarge_nlinear/test_meyerscal.c
+++ b/multilarge_nlinear/test_meyerscal.c
@@ -28,7 +28,7 @@ meyerscal_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < meyerscal_P; ++i)
     {
-      gsl_test_rel(x[i], meyerscal_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], meyerscal_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_powell1.c b/multilarge_nlinear/test_powell1.c
index 080c21b..4ff9f8f 100644
--- a/multilarge_nlinear/test_powell1.c
+++ b/multilarge_nlinear/test_powell1.c
@@ -19,7 +19,7 @@ powell1_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell1_P; ++i)
     {
-      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_powell2.c b/multilarge_nlinear/test_powell2.c
index 4293c49..a37b87b 100644
--- a/multilarge_nlinear/test_powell2.c
+++ b/multilarge_nlinear/test_powell2.c
@@ -19,7 +19,7 @@ powell2_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell2_P; ++i)
     {
-      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 0.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_powell3.c b/multilarge_nlinear/test_powell3.c
index 3bd414f..d71e019 100644
--- a/multilarge_nlinear/test_powell3.c
+++ b/multilarge_nlinear/test_powell3.c
@@ -21,7 +21,7 @@ powell3_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < powell3_P; ++i)
     {
-      gsl_test_rel(x[i], powell3_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], powell3_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_rat42.c b/multilarge_nlinear/test_rat42.c
index d147eda..f5b05cc 100644
--- a/multilarge_nlinear/test_rat42.c
+++ b/multilarge_nlinear/test_rat42.c
@@ -34,7 +34,7 @@ rat42_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rat42_P; ++i)
     {
-      gsl_test_rel(x[i], rat42_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rat42_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_rat43.c b/multilarge_nlinear/test_rat43.c
index 00e3dca..3693301 100644
--- a/multilarge_nlinear/test_rat43.c
+++ b/multilarge_nlinear/test_rat43.c
@@ -34,7 +34,7 @@ rat43_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rat43_P; ++i)
     {
-      gsl_test_rel(x[i], rat43_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rat43_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_rosenbrock.c b/multilarge_nlinear/test_rosenbrock.c
index 3925a3c..55c3246 100644
--- a/multilarge_nlinear/test_rosenbrock.c
+++ b/multilarge_nlinear/test_rosenbrock.c
@@ -19,7 +19,7 @@ rosenbrock_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rosenbrock_P; ++i)
     {
-      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_rosenbrocke.c b/multilarge_nlinear/test_rosenbrocke.c
index f5a330f..d7c7ad7 100644
--- a/multilarge_nlinear/test_rosenbrocke.c
+++ b/multilarge_nlinear/test_rosenbrocke.c
@@ -22,7 +22,7 @@ rosenbrocke_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < rosenbrocke_P; ++i)
     {
-      gsl_test_rel(x[i], rosenbrocke_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], rosenbrocke_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_roth.c b/multilarge_nlinear/test_roth.c
index 41d81e3..4596702 100644
--- a/multilarge_nlinear/test_roth.c
+++ b/multilarge_nlinear/test_roth.c
@@ -35,7 +35,7 @@ roth_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < roth_P; ++i)
     {
-      gsl_test_rel(x[i], roth_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], roth_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_thurber.c b/multilarge_nlinear/test_thurber.c
index 68bee23..86bd9f7 100644
--- a/multilarge_nlinear/test_thurber.c
+++ b/multilarge_nlinear/test_thurber.c
@@ -50,7 +50,7 @@ thurber_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < thurber_P; ++i)
     {
-      gsl_test_rel(x[i], thurber_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], thurber_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_vardim.c b/multilarge_nlinear/test_vardim.c
index 18521c8..753ad4a 100644
--- a/multilarge_nlinear/test_vardim.c
+++ b/multilarge_nlinear/test_vardim.c
@@ -19,7 +19,7 @@ vardim_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < vardim_P; ++i)
     {
-      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], 1.0, epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_watson.c b/multilarge_nlinear/test_watson.c
index b7063f5..5d312e4 100644
--- a/multilarge_nlinear/test_watson.c
+++ b/multilarge_nlinear/test_watson.c
@@ -22,7 +22,7 @@ watson_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < watson_P; ++i)
     {
-      gsl_test_rel(x[i], watson_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], watson_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_wnlin.c b/multilarge_nlinear/test_wnlin.c
index 9f5a661..35247ff 100644
--- a/multilarge_nlinear/test_wnlin.c
+++ b/multilarge_nlinear/test_wnlin.c
@@ -46,7 +46,7 @@ wnlin_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < wnlin_P; ++i)
     {
-      gsl_test_rel(x[i], wnlin_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], wnlin_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/multilarge_nlinear/test_wood.c b/multilarge_nlinear/test_wood.c
index 6d6d126..1907a76 100644
--- a/multilarge_nlinear/test_wood.c
+++ b/multilarge_nlinear/test_wood.c
@@ -20,7 +20,7 @@ wood_checksol(const double x[], const double sumsq,
 
   for (i = 0; i < wood_P; ++i)
     {
-      gsl_test_rel(x[i], wood_x[i], epsrel, "%s/%s i=%zu",
+      gsl_test_rel(x[i], wood_x[i], epsrel, "%s/%s i="F_ZU,
                    sname, pname, i);
     }
 }
diff --git a/rstat/test.c b/rstat/test.c
index d226ab5..15e8fd7 100644
--- a/rstat/test.c
+++ b/rstat/test.c
@@ -72,12 +72,12 @@ test_basic(const size_t n, const double data[], const double tol)
   skew = gsl_rstat_skew(rstat_workspace_p);
   kurtosis = gsl_rstat_kurtosis(rstat_workspace_p);
 
-  gsl_test_rel(mean, expected_mean, tol, "mean n=%zu", n);
-  gsl_test_rel(var, expected_var, tol, "variance n=%zu", n);
-  gsl_test_rel(sd, expected_sd, tol, "stddev n=%zu", n);
-  gsl_test_rel(rms, expected_rms, tol, "rms n=%zu", n);
-  gsl_test_rel(skew, expected_skew, tol, "skew n=%zu", n);
-  gsl_test_rel(kurtosis, expected_kurtosis, tol, "kurtosis n=%zu", n);
+  gsl_test_rel(mean, expected_mean, tol, "mean n="F_ZU, n);
+  gsl_test_rel(var, expected_var, tol, "variance n="F_ZU, n);
+  gsl_test_rel(sd, expected_sd, tol, "stddev n="F_ZU, n);
+  gsl_test_rel(rms, expected_rms, tol, "rms n="F_ZU, n);
+  gsl_test_rel(skew, expected_skew, tol, "skew n="F_ZU, n);
+  gsl_test_rel(kurtosis, expected_kurtosis, tol, "kurtosis n="F_ZU, n);
 
   gsl_rstat_free(rstat_workspace_p);
 }
diff --git a/spblas/test.c b/spblas/test.c
index 0c2637d..f70e2c6 100644
--- a/spblas/test.c
+++ b/spblas/test.c
@@ -98,7 +98,7 @@ test_vectors(gsl_vector *observed, gsl_vector *expected, const double tol,
       double x_obs = gsl_vector_get(observed, i);
       double x_exp = gsl_vector_get(expected, i);
 
-      gsl_test_rel(x_obs, x_exp, tol, "N=%zu i=%zu %s", N, i, str);
+      gsl_test_rel(x_obs, x_exp, tol, "N="F_ZU" i="F_ZU" %s", N, i, str);
     }
 
   return s;
diff --git a/specfunc/test_legendre.c b/specfunc/test_legendre.c
index 3fb8e10..800a0e7 100644
--- a/specfunc/test_legendre.c
+++ b/specfunc/test_legendre.c
@@ -127,7 +127,7 @@ test_value(const size_t lmax, const size_t l, const size_t m,
 
   value = p[idx];
 
-  gsl_test_rel(value, expected, tol, "%s %s lmax=%zu l=%zu m=%zu", desc, desc2, lmax, l, m);
+  gsl_test_rel(value, expected, tol, "%s %s lmax="F_ZU" l="F_ZU" m="F_ZU, desc, desc2, lmax, l, m);
 } /* test_value() */
 
 /* Y_{lm} = factor * S_{lm} */
@@ -174,7 +174,7 @@ test_legendre_compare(const size_t lmax, const double *p_expected,
             continue;
 
           gsl_test_rel(p[idx] / fac, p_expected[idx], 1.0e-10,
-                       "%s %s l=%zu m=%zu", desc, desc2, l, m);
+                       "%s %s l="F_ZU" m="F_ZU, desc, desc2, l, m);
         }
     }
 
@@ -247,7 +247,7 @@ test_legendre_schmidt(const size_t lmax, const double csphase, const char *desc)
           double rhs = 1.0;
 
           gsl_test_rel(sum, rhs, 1.0e-10,
-                       "%s l=%zu, x=%f, sum=%.12e", desc, l, x, sum);
+                       "%s l="F_ZU", x=%f, sum=%.12e", desc, l, x, sum);
         }
     }
 
@@ -267,12 +267,12 @@ test_legendre_schmidt(const size_t lmax, const double csphase, const char *desc)
             continue;
 
           /* check p = p_alt = p2 */
-          gsl_test_rel(p[i], p2[i], 1.0e-10, "%s deriv i=%zu", desc, i);
-          gsl_test_rel(p_alt[i], p2[i], 1.0e-10, "%s deriv_alt i=%zu", desc, i);
+          gsl_test_rel(p[i], p2[i], 1.0e-10, "%s deriv i="F_ZU, desc, i);
+          gsl_test_rel(p_alt[i], p2[i], 1.0e-10, "%s deriv_alt i="F_ZU, desc, i);
 
           /* check dp = -1/u*dp_alt */
           gsl_test_rel(-uinv * dp_alt[i], dp[i], 1.0e-10,
-                       "%s deriv_alt x=%f i=%zu", desc, x, i);
+                       "%s deriv_alt x=%f i="F_ZU, desc, x, i);
         }
 
       for (l = 0; l <= lmax; ++l)
@@ -280,7 +280,7 @@ test_legendre_schmidt(const size_t lmax, const double csphase, const char *desc)
           double sum = test_legendre_sum_deriv(l, p, dp);
 
           gsl_test_abs(sum, 0.0, 1.0e-10,
-                       "%s deriv l=%zu, x=%f, sum=%.12e", desc, l, x, sum);
+                       "%s deriv l="F_ZU", x=%f, sum=%.12e", desc, l, x, sum);
         }
     }
 
@@ -296,7 +296,7 @@ test_legendre_schmidt(const size_t lmax, const double csphase, const char *desc)
           if (fabs(p2[i]) < GSL_DBL_MIN)
             continue;
 
-          gsl_test_rel(p[i], p2[i], 1.0e-10, "%s deriv2 i=%zu", desc, i);
+          gsl_test_rel(p[i], p2[i], 1.0e-10, "%s deriv2 i="F_ZU, desc, i);
         }
 
       for (l = 0; l <= lmax; ++l)
@@ -305,9 +305,9 @@ test_legendre_schmidt(const size_t lmax, const double csphase, const char *desc)
           double sum2 = test_legendre_sum_deriv2(l, p, dp, d2p);
 
           gsl_test_abs(sum, 0.0, 1.0e-10,
-                       "%s deriv2 l=%zu, x=%f, sum=%.12e", desc, l, x, sum);
+                       "%s deriv2 l="F_ZU", x=%f, sum=%.12e", desc, l, x, sum);
           gsl_test_abs(sum2, 0.0, 1.0e-6,
-                       "%s deriv2 l=%zu, x=%f, sum=%.12e", desc, l, x, sum2);
+                       "%s deriv2 l="F_ZU", x=%f, sum=%.12e", desc, l, x, sum2);
         }
     }
 
@@ -459,11 +459,11 @@ test_legendre_unnorm(const size_t lmax_orig, const char *desc)
           /* test S(l,0) = P(l,0) */
           idx = gsl_sf_legendre_array_index(l, 0);
           gsl_test_rel(p[idx], p_schmidt[idx], 1.0e-10,
-                       "unnorm l=%zu, m=0, x=%f", l, x);
+                       "unnorm l="F_ZU", m=0, x=%f", l, x);
           gsl_test_rel(dp[idx], dp_schmidt[idx], 1.0e-10,
-                       "unnorm deriv l=%zu, m=0, x=%f", l, x);
+                       "unnorm deriv l="F_ZU", m=0, x=%f", l, x);
           gsl_test_rel(d2p[idx], d2p_schmidt[idx], 1.0e-10,
-                       "unnorm deriv2 l=%zu, m=0, x=%f", l, x);
+                       "unnorm deriv2 l="F_ZU", m=0, x=%f", l, x);
 
           /* test S(l,m) = a_{lm} * P(l,m) for m > 0 */
           for (m = 1; m <= l; ++m)
@@ -471,11 +471,11 @@ test_legendre_unnorm(const size_t lmax_orig, const char *desc)
               idx = gsl_sf_legendre_array_index(l, m);
 
               gsl_test_rel(a_lm * p[idx], p_schmidt[idx], 1.0e-9,
-                           "unnorm l=%zu, m=%zu, x=%f", l, m, x);
+                           "unnorm l="F_ZU", m="F_ZU", x=%f", l, m, x);
               gsl_test_abs(a_lm * dp[idx], dp_schmidt[idx], 1.0e-10,
-                           "unnorm deriv l=%zu, m=%zu, x=%f", l, m, x);
+                           "unnorm deriv l="F_ZU", m="F_ZU", x=%f", l, m, x);
               gsl_test_abs(a_lm * d2p[idx], d2p_schmidt[idx], 1.0e-10,
-                           "unnorm deriv2 l=%zu, m=%zu, x=%f", l, m, x);
+                           "unnorm deriv2 l="F_ZU", m="F_ZU", x=%f", l, m, x);
 
               a_lm /= sqrt((double) (l + m + 1)) *
                       sqrt((double) (l - m));
@@ -490,7 +490,7 @@ test_legendre_unnorm(const size_t lmax_orig, const char *desc)
             {
               size_t idx = gsl_sf_legendre_array_index(l, m);
               gsl_test_rel(p2[idx], p[idx], 1.0e-10,
-                           "%s compare l=%zu, m=%zu, x=%f",
+                           "%s compare l="F_ZU", m="F_ZU", x=%f",
                            desc, l, m, x);
             }
         }
diff --git a/splinalg/test.c b/splinalg/test.c
index d608822..09811bc 100644
--- a/splinalg/test.c
+++ b/splinalg/test.c
@@ -158,7 +158,7 @@ test_poisson(const size_t N, const double epsrel, const int compress)
     }
   while (status == GSL_CONTINUE && ++iter < max_iter);
 
-  gsl_test(status, "%s poisson status s=%d N=%zu", desc, status, N);
+  gsl_test(status, "%s poisson status s=%d N="F_ZU, desc, status, N);
 
   /* check solution against analytic */
   for (i = 0; i < n; ++i)
@@ -167,7 +167,7 @@ test_poisson(const size_t N, const double epsrel, const int compress)
       double u_gsl = gsl_vector_get(u, i);
       double u_exact = sin(M_PI * xi);
 
-      gsl_test_rel(u_gsl, u_exact, epsrel, "%s poisson N=%zu i=%zu",
+      gsl_test_rel(u_gsl, u_exact, epsrel, "%s poisson N="F_ZU" i="F_ZU,
                    desc, N, i);
     }
 
@@ -183,7 +183,7 @@ test_poisson(const size_t N, const double epsrel, const int compress)
     normb = gsl_blas_dnrm2(b);
 
     status = (normr <= tol*normb) != 1;
-    gsl_test(status, "%s poisson residual N=%zu normr=%.12e normb=%.12e",
+    gsl_test(status, "%s poisson residual N="F_ZU" normr=%.12e normb=%.12e",
              desc, N, normr, normb);
 
     gsl_vector_free(r);
@@ -257,7 +257,7 @@ test_toeplitz(const size_t N, const double a, const double b,
     }
   while (status == GSL_CONTINUE && ++iter < max_iter);
 
-  gsl_test(status, "%s toeplitz status s=%d N=%zu a=%f b=%f c=%f",
+  gsl_test(status, "%s toeplitz status s=%d N="F_ZU" a=%f b=%f c=%f",
            desc, status, N, a, b, c);
 
   /* check that the residual satisfies ||r|| <= tol*||b|| */
@@ -272,7 +272,7 @@ test_toeplitz(const size_t N, const double a, const double b,
     normb = gsl_blas_dnrm2(rhs);
 
     status = (normr <= tol*normb) != 1;
-    gsl_test(status, "%s toeplitz residual N=%zu a=%f b=%f c=%f normr=%.12e normb=%.12e",
+    gsl_test(status, "%s toeplitz residual N="F_ZU" a=%f b=%f c=%f normr=%.12e normb=%.12e",
              desc, N, a, b, c, normr, normb);
 
     gsl_vector_free(r);
@@ -308,7 +308,7 @@ test_random(const size_t N, const gsl_rng *r, const int compress)
     B = A;
 
   status = gsl_splinalg_itersolve_iterate(B, b, tol, x, w);
-  gsl_test(status, "%s random status s=%d N=%zu", desc, status, N);
+  gsl_test(status, "%s random status s=%d N="F_ZU, desc, status, N);
 
   /* check that the residual satisfies ||r|| <= tol*||b|| */
   {
@@ -322,7 +322,7 @@ test_random(const size_t N, const gsl_rng *r, const int compress)
     normb = gsl_blas_dnrm2(b);
 
     status = (normr <= tol*normb) != 1;
-    gsl_test(status, "%s random residual N=%zu normr=%.12e normb=%.12e",
+    gsl_test(status, "%s random residual N="F_ZU" normr=%.12e normb=%.12e",
              desc, N, normr, normb);
 
     gsl_vector_free(res);
diff --git a/spmatrix/spio.c b/spmatrix/spio.c
index f6cdba1..bb1cad2 100644
--- a/spmatrix/spio.c
+++ b/spmatrix/spio.c
@@ -51,7 +51,7 @@ gsl_spmatrix_fprintf(FILE *stream, const gsl_spmatrix *m,
     }
 
   /* print rows,columns,nnz */
-  status = fprintf(stream, "%zu\t%zu\t%zu\n",
+  status = fprintf(stream, F_ZU"\t"F_ZU"\t"F_ZU"\n",
                    m->size1, m->size2, m->nz);
   if (status < 0)
     {
@@ -64,7 +64,7 @@ gsl_spmatrix_fprintf(FILE *stream, const gsl_spmatrix *m,
 
       for (n = 0; n < m->nz; ++n)
         {
-          status = fprintf(stream, "%zu\t%zu\t", m->i[n] + 1, m->p[n] + 1);
+          status = fprintf(stream, F_ZU"\t"F_ZU"\t", m->i[n] + 1, m->p[n] + 1);
           if (status < 0)
             {
               GSL_ERROR("fprintf failed", GSL_EFAILED);
@@ -91,7 +91,7 @@ gsl_spmatrix_fprintf(FILE *stream, const gsl_spmatrix *m,
         {
           for (p = m->p[j]; p < m->p[j + 1]; ++p)
             {
-              status = fprintf(stream, "%zu\t%zu\t", m->i[p] + 1, j + 1);
+              status = fprintf(stream, F_ZU"\t"F_ZU"\t", m->i[p] + 1, j + 1);
               if (status < 0)
                 {
                   GSL_ERROR("fprintf failed", GSL_EFAILED);
@@ -119,7 +119,7 @@ gsl_spmatrix_fprintf(FILE *stream, const gsl_spmatrix *m,
         {
           for (p = m->p[i]; p < m->p[i + 1]; ++p)
             {
-              status = fprintf(stream, "%zu\t%zu\t", i + 1, m->i[p] + 1);
+              status = fprintf(stream, F_ZU"\t"F_ZU"\t", i + 1, m->i[p] + 1);
               if (status < 0)
                 {
                   GSL_ERROR("fprintf failed", GSL_EFAILED);
@@ -164,7 +164,7 @@ gsl_spmatrix_fscanf(FILE *stream)
       if (*buf == '%')
         continue;
 
-      c = sscanf(buf, "%zu %zu %zu",
+      c = sscanf(buf, F_ZU" "F_ZU" "F_ZU,
                  &size1, &size2, &nz);
       if (c == 3)
         {
@@ -190,7 +190,7 @@ gsl_spmatrix_fscanf(FILE *stream)
 
     while (fgets(buf, 1024, stream) != NULL)
       {
-        int c = sscanf(buf, "%zu %zu %lg", &i, &j, &val);
+        int c = sscanf(buf, F_ZU" "F_ZU" %lg", &i, &j, &val);
         if (c < 3 || (i == 0) || (j == 0))
           {
             GSL_ERROR_NULL ("error in input file format", GSL_EFAILED);
diff --git a/spmatrix/test.c b/spmatrix/test.c
index d39f267..9931b99 100644
--- a/spmatrix/test.c
+++ b/spmatrix/test.c
@@ -125,21 +125,21 @@ test_getset(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status, "test_getset: M=%zu N=%zu _get != _set", M, N);
+    gsl_test(status, "test_getset: M="F_ZU" N="F_ZU" _get != _set", M, N);
 
     /* test setting an element to 0 */
     gsl_spmatrix_set(m, 0, 0, 1.0);
     gsl_spmatrix_set(m, 0, 0, 0.0);
 
     status = gsl_spmatrix_get(m, 0, 0) != 0.0;
-    gsl_test(status, "test_getset: M=%zu N=%zu m(0,0) = %f",
+    gsl_test(status, "test_getset: M="F_ZU" N="F_ZU" m(0,0) = %f",
              M, N, gsl_spmatrix_get(m, 0, 0));
 
     /* test gsl_spmatrix_set_zero() */
     gsl_spmatrix_set(m, 0, 0, 1.0);
     gsl_spmatrix_set_zero(m);
     status = gsl_spmatrix_get(m, 0, 0) != 0.0;
-    gsl_test(status, "test_getset: M=%zu N=%zu set_zero m(0,0) = %f",
+    gsl_test(status, "test_getset: M="F_ZU" N="F_ZU" set_zero m(0,0) = %f",
              M, N, gsl_spmatrix_get(m, 0, 0));
 
     /* resassemble matrix to ensure nz is calculated correctly */
@@ -154,7 +154,7 @@ test_getset(const size_t M, const size_t N,
       }
 
     status = gsl_spmatrix_nnz(m) != M * N;
-    gsl_test(status, "test_getset: M=%zu N=%zu set_zero nz = %zu",
+    gsl_test(status, "test_getset: M="F_ZU" N="F_ZU" set_zero nz = "F_ZU,
              M, N, gsl_spmatrix_nnz(m));
 
     /* test gsl_spmatrix_ptr() */
@@ -172,7 +172,7 @@ test_getset(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status == 2, "test_getset: M=%zu N=%zu triplet ptr", M, N);
+    gsl_test(status == 2, "test_getset: M="F_ZU" N="F_ZU" triplet ptr", M, N);
 
     gsl_spmatrix_free(m);
   }
@@ -200,11 +200,11 @@ test_getset(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status, "test_getset: duplicate test M=%zu N=%zu _get != _set", M, N);
+    gsl_test(status, "test_getset: duplicate test M="F_ZU" N="F_ZU" _get != _set", M, N);
 
     nnz = gsl_spmatrix_nnz(m);
     status = nnz != expected_nnz;
-    gsl_test(status, "test_getset: duplicate test M=%zu N=%zu nnz=%zu, expected=%zu",
+    gsl_test(status, "test_getset: duplicate test M="F_ZU" N="F_ZU" nnz="F_ZU", expected="F_ZU,
              M, N, nnz, expected_nnz);
 
     gsl_spmatrix_free(m);
@@ -238,8 +238,8 @@ test_getset(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status == 1, "test_getset: M=%zu N=%zu CCS get", M, N);
-    gsl_test(status == 2, "test_getset: M=%zu N=%zu CCS ptr", M, N);
+    gsl_test(status == 1, "test_getset: M="F_ZU" N="F_ZU" CCS get", M, N);
+    gsl_test(status == 2, "test_getset: M="F_ZU" N="F_ZU" CCS ptr", M, N);
 
     gsl_spmatrix_free(T);
     gsl_spmatrix_free(C);
@@ -273,8 +273,8 @@ test_getset(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status == 1, "test_getset: M=%zu N=%zu CRS get", M, N);
-    gsl_test(status == 2, "test_getset: M=%zu N=%zu CRS ptr", M, N);
+    gsl_test(status == 1, "test_getset: M="F_ZU" N="F_ZU" CRS get", M, N);
+    gsl_test(status == 2, "test_getset: M="F_ZU" N="F_ZU" CRS ptr", M, N);
 
     gsl_spmatrix_free(T);
     gsl_spmatrix_free(C);
@@ -297,7 +297,7 @@ test_memcpy(const size_t M, const size_t N,
     gsl_spmatrix_memcpy(B_t, A);
 
     status = gsl_spmatrix_equal(A, B_t) != 1;
-    gsl_test(status, "test_memcpy: _memcpy M=%zu N=%zu triplet format", M, N);
+    gsl_test(status, "test_memcpy: _memcpy M="F_ZU" N="F_ZU" triplet format", M, N);
 
     B_ccs = gsl_spmatrix_alloc_nzmax(M, N, A_ccs->nzmax, GSL_SPMATRIX_CCS);
     B_crs = gsl_spmatrix_alloc_nzmax(M, N, A_ccs->nzmax, GSL_SPMATRIX_CRS);
@@ -306,10 +306,10 @@ test_memcpy(const size_t M, const size_t N,
     gsl_spmatrix_memcpy(B_crs, A_crs);
 
     status = gsl_spmatrix_equal(A_ccs, B_ccs) != 1;
-    gsl_test(status, "test_memcpy: _memcpy M=%zu N=%zu CCS", M, N);
+    gsl_test(status, "test_memcpy: _memcpy M="F_ZU" N="F_ZU" CCS", M, N);
 
     status = gsl_spmatrix_equal(A_crs, B_crs) != 1;
-    gsl_test(status, "test_memcpy: _memcpy M=%zu N=%zu CRS", M, N);
+    gsl_test(status, "test_memcpy: _memcpy M="F_ZU" N="F_ZU" CRS", M, N);
 
     gsl_spmatrix_free(A);
     gsl_spmatrix_free(A_ccs);
@@ -346,7 +346,7 @@ test_memcpy(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status, "test_memcpy: _transpose_memcpy M=%zu N=%zu triplet format", M, N);
+    gsl_test(status, "test_memcpy: _transpose_memcpy M="F_ZU" N="F_ZU" triplet format", M, N);
 
     status = 0;
     for (i = 0; i < M; ++i)
@@ -362,7 +362,7 @@ test_memcpy(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status, "test_memcpy: _transpose_memcpy M=%zu N=%zu CCS format", M, N);
+    gsl_test(status, "test_memcpy: _transpose_memcpy M="F_ZU" N="F_ZU" CCS format", M, N);
 
     status = 0;
     for (i = 0; i < M; ++i)
@@ -378,7 +378,7 @@ test_memcpy(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status, "test_memcpy: _transpose_memcpy M=%zu N=%zu CRS format", M, N);
+    gsl_test(status, "test_memcpy: _transpose_memcpy M="F_ZU" N="F_ZU" CRS format", M, N);
 
     gsl_spmatrix_free(A);
     gsl_spmatrix_free(AT);
@@ -425,9 +425,9 @@ test_transpose(const size_t M, const size_t N,
         }
     }
 
-  gsl_test(status == 1, "test_transpose: transpose M=%zu N=%zu triplet format",
+  gsl_test(status == 1, "test_transpose: transpose M="F_ZU" N="F_ZU" triplet format",
            M, N);
-  gsl_test(status == 2, "test_transpose: transpose2 M=%zu N=%zu triplet format",
+  gsl_test(status == 2, "test_transpose: transpose2 M="F_ZU" N="F_ZU" triplet format",
            M, N);
 
   /* test CCS transpose */
@@ -448,7 +448,7 @@ test_transpose(const size_t M, const size_t N,
         }
     }
 
-  gsl_test(status == 2, "test_transpose: transpose2 M=%zu N=%zu CCS format",
+  gsl_test(status == 2, "test_transpose: transpose2 M="F_ZU" N="F_ZU" CCS format",
            M, N);
 
   /* test CRS transpose */
@@ -469,7 +469,7 @@ test_transpose(const size_t M, const size_t N,
         }
     }
 
-  gsl_test(status == 2, "test_transpose: transpose2 M=%zu N=%zu CRS format",
+  gsl_test(status == 2, "test_transpose: transpose2 M="F_ZU" N="F_ZU" CRS format",
            M, N);
 
   gsl_spmatrix_free(A);
@@ -523,8 +523,8 @@ test_ops(const size_t M, const size_t N,
           }
       }
 
-    gsl_test(status == 1, "test_ops: add M=%zu N=%zu CCS", M, N);
-    gsl_test(status == 2, "test_ops: add M=%zu N=%zu CRS", M, N);
+    gsl_test(status == 1, "test_ops: add M="F_ZU" N="F_ZU" CCS", M, N);
+    gsl_test(status == 2, "test_ops: add M="F_ZU" N="F_ZU" CRS", M, N);
 
     gsl_spmatrix_free(A);
     gsl_spmatrix_free(B);
@@ -566,7 +566,7 @@ test_io_ascii(const size_t M, const size_t N,
     gsl_spmatrix *B = gsl_spmatrix_fscanf(f);
 
     status = gsl_spmatrix_equal(A, B) != 1;
-    gsl_test(status, "test_io_ascii: fprintf/fscanf M=%zu N=%zu triplet format", M, N);
+    gsl_test(status, "test_io_ascii: fprintf/fscanf M="F_ZU" N="F_ZU" triplet format", M, N);
 
     fclose(f);
     gsl_spmatrix_free(B);
@@ -588,7 +588,7 @@ test_io_ascii(const size_t M, const size_t N,
     gsl_spmatrix *B = gsl_spmatrix_fscanf(f);
 
     status = gsl_spmatrix_equal(A, B) != 1;
-    gsl_test(status, "test_io_ascii: fprintf/fscanf M=%zu N=%zu CCS format", M, N);
+    gsl_test(status, "test_io_ascii: fprintf/fscanf M="F_ZU" N="F_ZU" CCS format", M, N);
 
     fclose(f);
     gsl_spmatrix_free(B);
@@ -610,7 +610,7 @@ test_io_ascii(const size_t M, const size_t N,
     gsl_spmatrix *B = gsl_spmatrix_fscanf(f);
 
     status = gsl_spmatrix_equal(A, B) != 1;
-    gsl_test(status, "test_io_ascii: fprintf/fscanf M=%zu N=%zu CRS format", M, N);
+    gsl_test(status, "test_io_ascii: fprintf/fscanf M="F_ZU" N="F_ZU" CRS format", M, N);
 
     fclose(f);
     gsl_spmatrix_free(B);
@@ -653,7 +653,7 @@ test_io_binary(const size_t M, const size_t N,
     gsl_spmatrix_fread(f, B);
 
     status = gsl_spmatrix_equal(A, B) != 1;
-    gsl_test(status, "test_io_binary: fwrite/fread M=%zu N=%zu triplet format", M, N);
+    gsl_test(status, "test_io_binary: fwrite/fread M="F_ZU" N="F_ZU" triplet format", M, N);
 
     fclose(f);
     gsl_spmatrix_free(B);
@@ -677,7 +677,7 @@ test_io_binary(const size_t M, const size_t N,
     gsl_spmatrix_fread(f, B);
 
     status = gsl_spmatrix_equal(A_ccs, B) != 1;
-    gsl_test(status, "test_io_binary: fwrite/fread M=%zu N=%zu CCS format", M, N);
+    gsl_test(status, "test_io_binary: fwrite/fread M="F_ZU" N="F_ZU" CCS format", M, N);
 
     fclose(f);
     gsl_spmatrix_free(B);
@@ -701,7 +701,7 @@ test_io_binary(const size_t M, const size_t N,
     gsl_spmatrix_fread(f, B);
 
     status = gsl_spmatrix_equal(A_crs, B) != 1;
-    gsl_test(status, "test_io_binary: fwrite/fread M=%zu N=%zu CRS format", M, N);
+    gsl_test(status, "test_io_binary: fwrite/fread M="F_ZU" N="F_ZU" CRS format", M, N);
 
     fclose(f);
     gsl_spmatrix_free(B);
-- 
2.10.0

